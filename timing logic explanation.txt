the two ways of handeling timing in code is either polling or asyncronous execution

asyncronous execution is a mess and I don't like it so I didn't use it

polling method of timing:

start a clock
say you want a thing to happen in 5 seconds:
let thing_time = current_time + 5 seconds
enter a infinite loop
if current_time > thing_time them do the thing

the function above will keep looping till 5 seconds have passed then it will do the thing


thing_time = current_time + 5 seconds
thing_time = 0.1 + 5.0 = 5.1

if	current_time	 >	thing_time
	0.2 			!> 	5.1
	0.3 			!> 	5.1
	0.4 			!> 	5.1
	0.5 			!> 	5.1
	0.6 			!> 	5.1
	0.7 			!> 	5.1
	0.8 			!> 	5.1
	0.9 			!> 	5.1
	1.0 			!> 	5.1
	1.1 			!> 	5.1
	1.2 			!> 	5.1
	...			
	4.8 			!> 	5.1
	4.9 			!> 	5.1
	5.0 			!> 	5.1
	5.1 			!> 	5.1
	5.2 			 > 	5.1 then do the thing

note the reason you use greather than rather than equal to if becuase when you application is looping
hundreds of thousands of millions of times a second you can't round the current time as you'd lose
resultion. the draw back of this is you reach the limit of floating point numbers so we use greater
than so to avoid the posibility of missing the time slot. also if there is a lag spike the greater
than method will catch that.
for example

thing_time =   5.100328

current_time = 5.100113
current_time = 5.100175
current_time = 5.100246
current_time = 5.100301
current_time = 5.100366
current_time = 5.100421
current_time = 5.100478

you'll notice that the exact value of thing_time does not come up
note: python uses fp64 so the number of decimal places is higher but the point is the same
